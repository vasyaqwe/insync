import "@/styles/globals.css"

import { ClerkProvider, currentUser } from "@clerk/nextjs"
import { GeistSans } from "geist/font/sans"
import { cookies, headers } from "next/headers"
import { Toaster } from "sonner"

import { TRPCReactProvider } from "@/trpc/react"
import { Header } from "@/components/layout/header"
import { unstable_setRequestLocale } from "next-intl/server"
import { defaultLocale, locales } from "@/navigation"
import { redirect } from "next/navigation"

export const metadata = {
   title: "Create T3 App",
   description: "Generated by create-t3-app",
   icons: [{ rel: "icon", url: "/favicon.ico" }],
}

export function generateStaticParams() {
   return locales.map((locale) => ({ locale }))
}

export default async function RootLayout({
   children,
   params: { locale },
}: {
   children: React.ReactNode
   params: { locale: (typeof locales)[number] }
}) {
   const isValidLocale = locales.some((cur) => cur === locale)

   if (!isValidLocale) {
      const headersList = headers()
      const language = headersList.get("Accept-Language")?.slice(0, 2)

      const prevUrl = locale
      //if locale is invalid, it becomes the url

      if (locales.some((l) => l === language)) {
         return redirect(`/${language}/${prevUrl}`)
      }

      return redirect(`/${defaultLocale}/${prevUrl}`)
   }

   const user = await currentUser()

   // Enable static rendering
   unstable_setRequestLocale(locale)

   return (
      <html
         lang={locale}
         className="[--header-height:75px]"
      >
         <body className={`grainy-bg font-primary ${GeistSans.variable}`}>
            <ClerkProvider>
               <TRPCReactProvider cookies={cookies().toString()}>
                  <Header user={user} />
                  <main>
                     {children}
                     <Toaster
                        richColors
                        style={{ font: "inherit" }}
                     />
                  </main>
               </TRPCReactProvider>
            </ClerkProvider>
         </body>
      </html>
   )
}
