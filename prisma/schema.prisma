// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         String  @id @default(uuid())
    externalId String  @unique
    imageUrl   String?
    firstName  String
    lastName   String
    email      String

    organizations Organization[] @relation("OrganizationMembers")
    boards        Board[]        @relation("BoardMembers")

    lists                           List[]
    cards                           Card[]
    auditLogs                       AuditLog[]
    cardComments                    CardComment[]
    sentOrganizationInvitations     OrganizationInvitation[] @relation("InvitationSender")
    receivedOrganizationInvitations OrganizationInvitation[] @relation("InvitedUser")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Organization {
    id   String @id @default(uuid())
    name String

    auditLogs AuditLog[]
    boards    Board[]
    members   User[]     @relation("OrganizationMembers")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    invitations OrganizationInvitation[]
}

enum INVITATION_STATUS {
    PENDING
    DECLINED
    ACCEPTED
}

model OrganizationInvitation {
    id String @id @default(uuid())

    token String @unique

    invitedUser      User?   @relation("InvitedUser", fields: [invitedUserId], references: [id])
    invitedUserId    String?
    invitedUserEmail String? @unique

    invitationSender   User   @relation("InvitationSender", fields: [invitationSenderId], references: [id])
    invitationSenderId String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    status INVITATION_STATUS

    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Board {
    id    String @id @default(uuid())
    title String

    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    lists   List[]
    members User[] @relation("BoardMembers")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model List {
    id    String @id @default(uuid())
    title String
    order Int

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    boardId String
    board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

    cards Card[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([boardId])
}

model Card {
    id          String  @id @default(uuid())
    title       String
    order       Int
    description String? @db.Text

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    listId String
    list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([listId])
}

model CardComment {
    id      String  @id @default(uuid())
    content String? @db.Text

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ACTION {
    CREATE
    UPDATE
    DELETE
}

enum ENTITY_TYPE {
    BOARD
    LIST
    CARD
}

model AuditLog {
    id String @id @default(uuid())

    action      ACTION
    entityId    String
    entityType  ENTITY_TYPE
    entityTitle String

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrgLimit {
    id    String @id @default(uuid())
    orgId String @unique
    count Int    @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrgSubscription {
    id    String @id @default(uuid())
    orgId String @unique

    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}
